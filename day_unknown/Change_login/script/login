#!/bin/bash
workingdir="$(pwd)"
gres_file=$2
css=$3
gres_file_dir=$(dirname "$gres_file")
gres_xml=$(basename "$gres_file").xml

for res_dir in  `sudo gresource list $gres_file`; do
	res_dir="${res_dir#\/org\/gnome\/shell/}"
	if [ ! -d "$workingdir/${res_dir%/*}" ]; then
	  mkdir -p "$workingdir/${res_dir%/*}"
	fi
done
for res in `sudo gresource list $gres_file`;do
    sudo gresource extract $gres_file $res >$workingdir"/"${res#\/org\/gnome\/shell/}
    done
find . -name "*png" -type f -delete
find . -name "*jpg" -type f -delete
img_file_path="$(realpath "$1")"
img=$(basename $img_file_path)
change(){
    cp $img_file_path "$workingdir/theme/$img"
    old="#lockDialogGroup \{.*?\}"
    new="#lockDialogGroup {
	background: url('resource:\/\/\/org\/gnome\/shell\/theme\/$img');
	background-size: cover; }"
    perl -i -0777 -pe "s/$old/$new/s" "$workingdir"/theme/$css
}



create_xml(){
echo "<?xml version=1.0 encoding=UTF-8?>
<gresources>
  <gresource prefix='/org/gnome/shell/theme'>
	    <file>$img</file>" > $gres_xml
for file in `gresource list $gres_file`; do
    if [[ "$file" != *".jpg" && "$file" != *".png" ]];then
        echo "      <file>${file#\/org\/gnome/shell\/theme\/}</file>" \
        >> $gres_xml
    fi
done
echo "  </gresource>
</gresources>" >> $gres_xml
}

compile(){
    glib-compile-resources --sourcedir=./theme  ./gnome-shell-theme.gresource.xml
    sudo cp ./"$(basename "$gres_file")" "$gres_file_dir"
    sudo rm -rf theme $(basename "$gres_file") $gres_xml
    sudo systemctl restart gdm3.service
    
}

change
create_xml
compile
